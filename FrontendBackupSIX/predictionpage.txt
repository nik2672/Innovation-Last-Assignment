// PredictionPage.js
import React, { useState, useEffect } from 'react';
import { Container, Box, Typography, Fade, CircularProgress } from '@mui/material';
import { useLocation } from 'react-router-dom';
import { Bar, Line } from 'react-chartjs-2';
import 'chart.js/auto';
import { MapContainer, TileLayer } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';

function PredictionPage() {
  const location = useLocation();
  const { formData } = location.state || {};
  const [predictedPrice, setPredictedPrice] = useState(null);
  const [error, setError] = useState(null);
  const [loadingPrediction, setLoadingPrediction] = useState(true);

  useEffect(() => {
    const fetchPrediction = async () => {
      try {
        const response = await fetch('http://localhost:8000/predict', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData),
        });
        
        if (response.ok) {
          const result = await response.json();
          setError(null);
          setPredictedPrice(result.predicted_price);
        } else {
          setError('Error fetching prediction.');
          setPredictedPrice(null);
        }
      } catch (error) {
        console.error('Error:', error);
        setError('Error fetching prediction.');
        setPredictedPrice(null);
      } finally {
        setLoadingPrediction(false);
      }
    };

    if (formData) {
      fetchPrediction();
    } else {
      setError('No data provided.');
      setLoadingPrediction(false);
    }
  }, [formData]);

  // Chart Data
  const barData = {
    labels: ['House', 'Townhouse', 'Unit'],
    datasets: [
      {
        label: 'Price Distribution by Property Type',
        data: [1500000, 1200000, 800000],
        backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56'],
      },
    ],
  };

  const lineDataRooms = {
    labels: [1, 2, 3, 4, 5],
    datasets: [
      {
        label: 'Average Price by Number of Rooms',
        data: [500000, 700000, 1000000, 1200000, 1400000],
        borderColor: '#36A2EB',
        fill: false,
      },
    ],
  };

  const lineDataDistance = {
    labels: [1, 5, 10, 15, 20, 25],
    datasets: [
      {
        label: 'Price by Distance from City',
        data: [2000000, 1800000, 1400000, 1000000, 800000, 600000],
        borderColor: '#FF6384',
        fill: false,
      },
    ],
  };

  return (
    <Container component="main" sx={{ mt: 8, mb: 2, flex: 1 }}>
      <Fade in timeout={1000}>
        <Box>
          <Typography variant="h3" component="h1" gutterBottom>
            Prediction Result
          </Typography>

          {loadingPrediction && (
            <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
              <CircularProgress />
            </Box>
          )}

          {predictedPrice && (
            <Typography variant="h5" sx={{ mt: 4 }}>
              Predicted Price: ${predictedPrice.toFixed(2)}
            </Typography>
          )}

          {error && (
            <Typography color="error" sx={{ mt: 4 }}>
              {error}
            </Typography>
          )}

          {/* First chart: Price Distribution by Property Type */}
          <Box sx={{ mt: 4 }}>
            <Typography variant="h6" gutterBottom>Price Distribution by Property Type</Typography>
            <Bar data={barData} />
          </Box>

          {/* Second chart: Average Price by Number of Rooms */}
          <Box sx={{ mt: 4 }}>
            <Typography variant="h6" gutterBottom>Average Price by Number of Rooms</Typography>
            <Line data={lineDataRooms} />
          </Box>

          {/* Third chart: Price by Distance from City */}
          <Box sx={{ mt: 4 }}>
            <Typography variant="h6" gutterBottom>Price by Distance from City</Typography>
            <Line data={lineDataDistance} />
          </Box>

          {/* Static Leaflet Map Centered on Melbourne */}
          <Box sx={{ mt: 4 }}>
            <Typography variant="h6" gutterBottom>Melbourne Area Map</Typography>
            <MapContainer center={[-37.8136, 144.9631]} zoom={10} style={{ height: "400px", width: "100%" }}>
              <TileLayer
                url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
              />
            </MapContainer>
          </Box>
        </Box>
      </Fade>
    </Container>
  );
}

export default PredictionPage;
