import React, { useState, useEffect } from 'react';
import { Container, Box, Typography, Fade, CircularProgress, Button } from '@mui/material';
import { useLocation, useNavigate } from 'react-router-dom';
import { Bar, Line } from 'react-chartjs-2';
import MapComponent from './MapComponent';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  LineElement,
  PointElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';

ChartJS.register(CategoryScale, LinearScale, BarElement, LineElement, PointElement, Title, Tooltip, Legend);

function PredictionPage() {
  const location = useLocation();
  const navigate = useNavigate();
  const { formData } = location.state || {};
  const [predictedPrice, setPredictedPrice] = useState(null);
  const [displayedPrice, setDisplayedPrice] = useState(0);
  const [error, setError] = useState(null);
  const [loadingPrediction, setLoadingPrediction] = useState(true);
  const [chartData, setChartData] = useState({
    barData: { labels: [], datasets: [] },
    lineDataRooms: { labels: [], datasets: [] },
  });

  useEffect(() => {
    const fetchPrediction = async () => {
      if (!formData) {
        setError('No data provided.');
        setLoadingPrediction(false);
        return;
      }

      try {
        const response = await fetch('http://localhost:8000/predict', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData),
        });

        if (response.ok) {
          const result = await response.json();
          setPredictedPrice(result.predicted_price);
          setError(null);
        } else {
          setError('Error fetching prediction.');
        }
      } catch (error) {
        console.error('Error:', error);
        setError('Error fetching prediction.');
      } finally {
        setLoadingPrediction(false);
      }
    };

    fetchPrediction();
  }, [formData]);

  useEffect(() => {
    const fetchChartData = async () => {
      try {
        const response = await fetch('http://localhost:8000/data');
        const data = await response.json();

        const priceByType = data.reduce((acc, curr) => {
          const type = curr.Type;
          const price = parseFloat(curr.Price);
          if (!isNaN(price)) {
            acc[type] = acc[type] ? [...acc[type], price] : [price];
          }
          return acc;
        }, {});

        const avgPriceByType = Object.keys(priceByType).map((type) => ({
          type,
          avgPrice: priceByType[type].reduce((a, b) => a + b, 0) / priceByType[type].length,
        }));

        const avgPriceByRooms = data.reduce((acc, curr) => {
          const rooms = parseInt(curr.Rooms, 10);
          const price = parseFloat(curr.Price);
          if (!isNaN(price)) {
            acc[rooms] = acc[rooms] ? [...acc[rooms], price] : [price];
          }
          return acc;
        }, {});

        const barData = {
          labels: ['House', 'Townhouse', 'Unit'],
          datasets: [
            {
              label: 'Average Price of Property Type (House, Townhouse, Unit)',
              data: avgPriceByType.map((d) => d.avgPrice),
              backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56'],
              order: 1, // Changed order to render first
            },
            {
              label: 'Predicted Price',
              data: avgPriceByType.map((d) => (formData.Type === d.type ? predictedPrice : null)),
              type: 'line',
              borderColor: '#FF4500',
              backgroundColor: '#FF4500',
              borderWidth: 3,
              pointRadius: 10,
              hoverRadius: 12,
              pointBackgroundColor: '#FF4500',
              pointStyle: 'star',
              showLine: false,
              order: 0, // Changed order to render second
            },
          ],
        };

        const avgPricesByRooms = Object.keys(avgPriceByRooms).sort((a, b) => a - b);
        const lineDataRooms = {
          labels: avgPricesByRooms,
          datasets: [
            {
              label: 'Average Price by Number of Rooms',
              data: avgPricesByRooms.map(
                (room) =>
                  avgPriceByRooms[room].reduce((a, b) => a + b, 0) / avgPriceByRooms[room].length
              ),
              borderColor: '#36A2EB',
              fill: false,
              pointRadius: 5,
              order: 0, // Changed order to render first
            },
            {
              label: 'Predicted Price',
              data: avgPricesByRooms.map((room) =>
                formData.Rooms === parseInt(room) ? predictedPrice : null
              ),
              type: 'line',
              borderColor: '#FF4500',
              borderWidth: 3,
              pointRadius: 10,
              hoverRadius: 12,
              pointBackgroundColor: '#FF4500',
              pointStyle: 'star',
              showLine: false,
              order: 1, // Changed order to render second
            },
          ],
        };

        setChartData({ barData, lineDataRooms });
      } catch (error) {
        console.error('Error loading chart data:', error);
      }
    };

    if (predictedPrice !== null) {
      fetchChartData();
    }
  }, [predictedPrice, formData]);

  // Animation effect for price display
  useEffect(() => {
    if (predictedPrice !== null) {
      let start = 0;
      const increment = Math.ceil(predictedPrice / 50);
      const interval = setInterval(() => {
        start += increment;
        if (start >= predictedPrice) {
          clearInterval(interval);
          setDisplayedPrice(predictedPrice);
        } else {
          setDisplayedPrice(start);
        }
      }, 20);
    }
  }, [predictedPrice]);

  return (
    <Container component="main" sx={{ mt: 8, mb: 2, flex: 1 }}>
      <Fade in timeout={1000}>
        <Box>
          {loadingPrediction && (
            <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
              <CircularProgress />
            </Box>
          )}

          {predictedPrice && (
            <>
              <Typography
                variant="h3"
                sx={{ mt: 4, mb: 4, textAlign: 'center', color: 'green', fontWeight: 'bold' }}
              >
                Predicted Price: ${displayedPrice.toLocaleString()}
              </Typography>

              <MapComponent postcode={formData.Postcode} />

              {chartData.barData.datasets.length > 0 && (
                <Box sx={{ mt: 4 }}>
                  <Typography variant="h6" align="center" gutterBottom>
                    Price Distribution by Property Type
                  </Typography>
                  <Bar
                    data={chartData.barData}
                    options={{
                      scales: {
                        y: {
                          stacked: false,
                        },
                      },
                      plugins: {
                        legend: {
                          display: true,
                          labels: {
                            color: '#333',
                            font: {
                              size: 14,
                            },
                            usePointStyle: true,
                            boxWidth: 15,
                            // Removed generateLabels
                          },
                        },
                      },
                    }}
                  />
                </Box>
              )}

              {chartData.lineDataRooms.datasets.length > 0 && (
                <Box sx={{ mt: 4 }}>
                  <Typography variant="h6" align="center" gutterBottom>
                    Average Price by Number of Rooms
                  </Typography>
                  <Line
                    data={chartData.lineDataRooms}
                    options={{
                      plugins: {
                        legend: {
                          display: true,
                          labels: {
                            color: '#333',
                            font: {
                              size: 14,
                            },
                            usePointStyle: true,
                            boxWidth: 15,
                            // Removed generateLabels
                          },
                        },
                      },
                    }}
                  />
                </Box>
              )}
            </>
          )}

          {error && (
            <Typography color="error" sx={{ mt: 4 }}>
              {error}
            </Typography>
          )}

          {/* Back Button */}
          <Box sx={{ mt: 4 }}>
            <Button variant="contained" color="primary" onClick={() => navigate(-1)}>
              Back
            </Button>
          </Box>
        </Box>
      </Fade>
    </Container>
  );
}

export default PredictionPage;
